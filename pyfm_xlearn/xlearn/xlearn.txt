Python 接口
import xlearn as xl      # Import xlearn package
xl.hello()               # Say hello to user
# This part is for data
# X is feautres data, can be pandas DataFrame or numpy.ndarray,
# y is label, default None, can be pandas DataFrame\Series, array or list,
# filed_map is field map of features, default None, can be pandas DataFrame\Series, array or list
dmatrix = xl.DMatrix(X, y, field_map)
model = create_linear()  #  Create linear model.
model = create_fm()      #  Create factorization machines.
model = create_ffm()     #  Create field-aware factorizarion machines.
model.show()             #  Show model information.
model.fit(param, "model_path")   #  Train model.
model.cv(param)    # Perform cross-validation.
# Users can choose one of this two
model.predict("model_path", "output_path")  # Perform prediction, output result to file, return None.
model.predict("model_path")                 # Perform prediction, return result by numpy.ndarray.

# Users can choose one of this two
model.setTrain("data_path")      #  Set training data from file for xLearn.
model.setTrain(dmatrix)          #  Set training data from DMatrix for xLearn.

# Users can choose one of this two
# note: this type of validate must be same as train
# that is, set train from file, must set validate from file
model.setValidate("data_path")   #  Set validation data from file for xLearn.
model.setValidate(dmatrix)       #  Set validation data from DMatrix for xLearn.

# Users can choose one of this two
model.setTest("data_path")       #  Set test data from file for xLearn.
model.setTest(dmatrix)           #  Set test data from DMatrix for xLearn.
model.setQuiet()    #  Set xlearn to train model quietly.
model.setOnDisk()   #  Set xlearn to use on-disk training.
model.setNoBin()    # Do not generate bin file for training and test data.
model.setSign()     # Convert prediction to 0 and 1.
model.setSigmoid()  # Convert prediction to (0, 1).
model.disableNorm() # Disable instance-wise normalization.
model.disableLockFree()   # Disable lock-free training.
model.disableEarlyStop()  # Disable early-stopping.

超参数列表:
task     : {'binary',  # Binary classification
            'reg'}     # Regression
metric   : {'acc', 'prec', 'recall', 'f1', 'auc',   # for classification
            'mae', 'mape', 'rmse', 'rmsd'}  # for regression
lr       : float value  # learning rate
lambda   : float value  # regular lambda
k        : int value    # latent factor for fm and ffm
init     : float value  # model initialize
alpha    : float value  # hyper parameter for ftrl
beta     : float value  # hyper parameter for ftrl
lambda_1 : float value  # hyper parameter for ftrl
lambda_2 : float value  # hyper parameter for ftrl
nthread  : int value    # the number of CPU cores
epoch    : int vlaue    # number of epoch
fold     : int value    # number of fold for cross-validation
opt      : {'sgd', 'agagrad', 'ftrl'}  # optimization method
stop_window : Size of stop window for early-stopping.
block_size : int value  # block size for on-disk training
